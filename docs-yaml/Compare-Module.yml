examples:
- name: EXAMPLE 1
  preCode: ''
  code: >-
    PS C:\> Compare-Module | Where-object {$_.UpdateNeeded}



    Name             : DNSSuffix

    OnlineVersion    : 0.4.1

    InstalledVersion : 0.2.0

    PublishedDate    : 10/22/2018 8:21:46 PM

    UpdateNeeded     : True



    Name             : InvokeBuild

    OnlineVersion    : 5.4.2

    InstalledVersion : 3.2.2

    PublishedDate    : 12/7/2018 1:30:46 AM

    UpdateNeeded     : True

    ...
  postCode: List all modules that could be updated.
- name: EXAMPLE 2
  preCode: ''
  code: PS C:\> Compare-Module | Where UpdateNeeded | Out-Gridview -title "Select modules to update" -outputMode multiple | Foreach { Update-Module $_.name }
  postCode: Compare modules and send results to Out-Gridview. Use Out-Gridview as an object picker to decide what modules to update.
- name: EXAMPLE 3
  preCode: ''
  code: >-
    PS C:\> compare-module -name xWin* | format-table



    Name           OnlineVersion InstalledVersion PublishedDate         UpdateNeeded

    ----           ------------- ---------------- -------------         ------------

    xWindowsUpdate 2.7.0.0       2.7.0.0,2.5.0.0  7/12/2017 10:43:54 PM        False

    xWinEventLog   1.2.0.0       1.2.0.0          6/13/2018 8:06:45 PM         False
  postCode: Compare all modules that start with xWin* and display results in a table format.
- name: EXAMPLE 4
  preCode: ''
  code: >-
    PS C:\> get-dscresource xAD* | Select moduleName -Unique | compare-module



    Name             : xActiveDirectory

    OnlineVersion    : 2.22.0.0

    InstalledVersion : 2.16.0.0,2.14.0.0

    PublishedDate    : 10/25/2018 5:25:24 PM

    UpdateNeeded     : True



    Name             : xAdcsDeployment

    OnlineVersion    : 1.4.0.0

    InstalledVersion : 1.1.0.0,1.0.0.0

    PublishedDate    : 12/20/2017 10:10:43 PM

    UpdateNeeded     : True
  postCode: Get all DSC Resources that start with xAD and select the corresponding module name. Since the module name will be listed for every resource, get a unique list and pipe that to Compare-Module.
inputs:
- type: '[string]'
  description: ''
links:
- href: https://github.com/jdhitsolutions/PSScriptTools/blob/master/docs/Compare-Module.md
  text: 'Online Version:'
- href: ''
  text: Find-Module
- href: ''
  text: Get-Module
- href: ''
  text: Update-Module
module:
  name: PSScriptTools
name: Compare-Module
notes: 'Learn more about PowerShell: http://jdhitsolutions.com/blog/essential-powershell-resources/'
optionalParameters:
- name: Name
  acceptWildcardCharacters: true
  aliases:
  - modulename
  defaultValue: None
  description: The name of a module to check. Wildcards are permitted.
  parameterValueGroup: []
  pipelineInput: True (ByPropertyName)
  position: 1
  type: String
- name: Gallery
  aliases: []
  defaultValue: PSGallery
  description: Specify the remote repository or gallery to check.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: String
outputs:
- type: PSCustomObject
  description: ''
requiredParameters: []
remarks: Use this command to compare module versions between what is installed against an online repository like the PSGallery. Results will be automatically sorted by module name.
summary: Compare PowerShell module versions.
syntaxes:
- parameters:
  - Name
  - Gallery
