examples:
- name: EXAMPLE 1
  preCode: ''
  code: >-
    PS C:\> Get-MyVariable



    NName Value                  Type

    ---- -----                  ----

    a    bits                   ServiceController

    dt   10/22/2018 10:49:38 AM DateTime

    foo  123                    Int32

    r    {1, 2, 3, 4...}        Object[]

    ...
  postCode: Depending on the value and how PowerShell chooses to display it, you may not see the type.
- name: EXAMPLE 2
  preCode: ''
  code: >-
    PS C:\> Get-MyVariable | select name,type



    Name Type

    ---- ----

    a    ServiceController

    dt   DateTime

    foo  Int32

    r    Object[]
  postCode: ''
- name: EXAMPLE 3
  preCode: ''
  code: >-
    PS C:\> Get-MyVariable | Export-Clixml myvar.xml

    PS C:\> import-clixml .\myvar.xml | foreach {set-variable -Name $_.name -Value $_.value}
  postCode: You can then import this xml file in another session to restore these variables.
- name: EXAMPLE 4
  preCode: ''
  code: >-
    PS C:\> function foo { . c:\scripts\get-myvariable2.ps1;$a=4;$b=2;$c=$a*$b;get-MyVariable -notypeinformation -scope 1 -verbose;$c}



    PS C:\> foo

    VERBOSE: Getting system defined variables

    VERBOSE: Found 49

    VERBOSE: Getting current variables in 1 scope

    VERBOSE: Found 27

    VERBOSE: Filtering variables



    Name                           Value

    ----                           -----

    a                              4

    b                              2

    c                              8

    VERBOSE: Finished getting my variables

    8
  postCode: This sample function dot sources the script with this function. Within the function, Get-MyVariable is called specifying scope 1, or the parent scope. Scope 0 would be the scope of the Get-MyVariable function. Here's the result.
- name: EXAMPLE 5
  preCode: ''
  code: >-
    PS C:\> get-myvariable | where {$_.type -eq "Scriptblock"} | Select name,value



    Name                               Value

    ----                               -----

    bigp                               ps | where {$_.ws -gt 100mb}

    dirt                               Param(\[string\]$Path=$env:temp) Get-C...

    disk                               Param (\[string\]$computername=$env:co...

    run                                gsv | where {$_.status -eq "running"}

    up                                 Param(\[string\]$computername=$env:com...
  postCode: Get all my variables that are scriptblocks.
inputs:
- type: None
  description: ''
links:
- href: https://github.com/jdhitsolutions/PSScriptTools/blob/master/docs/Get-MyVariable.md
  text: 'Online Version:'
- href: ''
  text: Get-Variable
- href: ''
  text: About_Variables
- href: ''
  text: About_Scope
module:
  name: PSScriptTools
name: Get-MyVariable
notes: >-
  Learn more about PowerShell: http://jdhitsolutions.com/blog/essential-powershell-resources/

  An earlier version of this function is described at http://jdhitsolutions.com/blog/2012/05/get-my-variable-revisited
optionalParameters:
- name: Scope
  aliases: []
  defaultValue: Global
  description: The scope to query. The default is the Global scope but you can also specify Local, Script, Private or a number between 0 and 3 where 0 is the current scope, 1 is the parent scope, 2 is the grandparent scope and so on.
  parameterValueGroup: []
  pipelineInput: False
  position: 1
  type: String
- name: NoTypeInformation
  aliases: []
  defaultValue: False
  description: If specified, suppress the type information for each variable value.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: SwitchParameter
outputs:
- type: System.Management.Automation.PSVariable
  description: ''
requiredParameters: []
remarks: >-
  This function will return all variables not defined by PowerShell or by this function itself. The default is to return all user-created variables from the global scope but you can also specify a scope such as script, local or a number 0 through 5. The command will also display the value type for each variable. If you want to suppress this output use the -NoTypeInformation switch.

  This function is designed to work with the PowerShell console, NOT the the PowerShell ISE.
summary: Get all user defined variables
syntaxes:
- parameters:
  - Scope
  - NoTypeInformation
