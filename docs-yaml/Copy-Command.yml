examples:
- name: EXAMPLE 1
  preCode: ''
  code: PS C:\> Copy-Command Get-Process Get-MyProcess
  postCode: Create a copy of Get-Process called Get-MyProcess.
- name: EXAMPLE 2
  preCode: ''
  code: PS C:\> Copy-Command Get-Eventlog -asproxy -useforwardhelp
  postCode: Create a proxy function for Get-Eventlog and use forwarded help links.
- name: EXAMPLE 3
  preCode: ''
  code: PS C:\> Copy-Command Get-ADComputer Get-MyADComputer -includedynamic
  postCode: Create a wrapper function for Get-ADComputer called Get-MyADComputer. Due to the way the Active Directory cmdlets are written, most parameters appear to be dynamic so you need to include dynamic parameters otherwise there will be no parameters in the final function.
inputs:
- type: None
  description: ''
links:
- href: https://github.com/jdhitsolutions/PSScriptTools/blob/master/docs/Copy-Command.md
  text: 'Online Version:'
- href: ''
  text: Get-Command
module:
  name: PSScriptTools
name: Copy-Command
notes: 'Learn more about PowerShell: http://jdhitsolutions.com/blog/essential-powershell-resources/'
optionalParameters:
- name: NewName
  aliases: []
  defaultValue: None
  description: Specify a name for your copy of the command. If no new name is specified, the original name will be used.
  parameterValueGroup: []
  pipelineInput: False
  position: 2
  type: String
- name: IncludeDynamic
  aliases: []
  defaultValue: False
  description: The command will only copy explicitly defined parameters unless you specify to include any dynamic parameters as well. If you copy a command and it seems to be missing parameters, re-copy and include dynamic parameters.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: SwitchParameter
- name: AsProxy
  aliases: []
  defaultValue: False
  description: Create a traditional proxy function.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: SwitchParameter
- name: UseForwardHelp
  aliases: []
  defaultValue: False
  description: By default the copy process will create a comment-based help block with the original command's help which you can then edit to meet your requirements. Or you can opt to retain the forwarded help links to the original command.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: SwitchParameter
outputs:
- type: '[system.string[]]'
  description: ''
requiredParameters:
- name: Command
  aliases: []
  defaultValue: None
  description: The name of a PowerShell command, preferably a cmdlet but that is not a requirement. You can specify an alias and it will be resolved.
  parameterValueGroup: []
  pipelineInput: False
  position: 1
  type: String
remarks: >-
  This command will copy a PowerShell command, including parameters and help to a new user-specified command. You can use this to create a "wrapper" function or to easily create a proxy function. The default behavior is to create a copy of the command complete with the original comment-based help block.

  For best results, run this in the PowerShell ISE or Visual Studio code, the copied command will be opened in a new tab or file.
summary: Copy a PowerShell command.
syntaxes:
- parameters:
  - Command
  - NewName
  - IncludeDynamic
  - AsProxy
  - UseForwardHelp
