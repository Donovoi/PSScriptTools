examples:
- name: Example 1
  preCode: ''
  code: >-
    PS C:\> $tname = "myThing"

    PS C:\> $obj = [PSCustomObject]@{

        PSTypeName   = $tname

        Name         = "Jeff"

        Date         = (Get-Date)

        Computername = $env:computername

        OS           = (Get-Ciminstance win32_operatingsystem -Property Caption).caption

    }

    PS C:\> Update-TypeData -TypeName $tname -MemberType "ScriptProperty" -MemberName "Runtime" -value {(Get-Date) - [datetime]"1/1/2019"} -force

    PS C:\> $obj



    Name         : Jeff

    Date         : 2/10/2019 8:49:10 AM

    Computername : BOVINE320

    OS           : Microsoft Windows 10 Pro

    Runtime      : 40.20:49:43.9205882
  postCode: This example begins be creating a custom object. You might normally do this in a script or module.
- name: Example 2
  preCode: ''
  code: >-
    PS C:\> $obj | New-PSFormatXML -Properties Name, Date, Computername, OS -FormatType Table -path "C:\work\$tname.format.ps1xml"

    PS C:\> $obj | New-PSFormatXML -Properties Name, OS, Runtime -FormatType Table -view runtime -path "C:\work\$tname.format.ps1xml" -append

    PS C:\> $obj | New-PSFormatXML -FormatType List -path "C:\work\$tname.format.ps1xml" -append
  postCode: The object is then piped to this command to generate a new format.ps1xml. Subsequent commands add more formatted views. When the file is completed it can be modified.
- name: Example 3
  preCode: ''
  code: >-
    PS C:\> Update-FormatData -appendpath "C:\work\$tname.format.ps1xml"

    PS C:\> $obj



    Name Date                 Computername Operating System

    ---- ----                 ------------ ----------------

    Jeff 2/10/2019 8:49:10 AM BOVINE320    Microsoft Windows 10 Pro



    PS C:\> $obj | format-table -View runtime



    Name OS Runtime

    ---- -- -------

    Jeff    40.20:56:24.5411481



    PS C:\> $obj | format-list





    Name            : Jeff

    Date            : Sunday, February 10, 2019

    Computername    : BOVINE320

    OperatingSystem : Microsoft Windows 10 Pro

    Runtime         : 40.21:12:01
  postCode: After the format.ps1xml file is applied, the object can be formatted as designed.
- name: Example 4
  preCode: ''
  code: >-
    PS C:\> $obj | New-PSFormatXML -viewname computer -GroupBy Computername -path "c:\work\$tname.format.ps1xml" -append

    PS C:\> Update-FormatData -appendpath "C:\work\$tname.format.ps1xml"

    PS C:\> $obj | format-table -View computer





       Computername: BOVINE320



    Name Date                  OS                       Runtime

    ---- ----                  --                       -------

    Jeff 2/10/2019 8:49:10 AM Microsoft Windows 10 Pro 40.20:56:24.5411481
  postCode: This adds another view called Computer that groups objects on the Computername property.
inputs:
- type: System.Object
  description: ''
links:
- href: https://github.com/jdhitsolutions/PSScriptTools/blob/master/docs/New-PSFormatXML.md
  text: 'Online Version:'
- href: ''
  text: Update-FormatData
module:
  name: PSScriptTools
name: New-PSFormatXML
notes: 'Learn more about PowerShell: http://jdhitsolutions.com/blog/essential-powershell-resources/'
optionalParameters:
- name: Append
  aliases: []
  defaultValue: None
  description: Append the new view to an existing format.ps1xml file.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: SwitchParameter
- name: Confirm
  aliases:
  - cf
  defaultValue: None
  description: Prompts you for confirmation before running the cmdlet.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: SwitchParameter
- name: FormatType
  aliases: []
  defaultValue: Table
  description: Specify whether to create a table or list view
  parameterValueGroup:
  - Table
  - List
  pipelineInput: False
  position: 2
  type: String
- name: Passthru
  aliases: []
  defaultValue: None
  description: Write the ps1xml file object to the pipeline. If you run this command inside VS Code and use this parameter, the file will be opened in the editor.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: SwitchParameter
- name: Properties
  aliases: []
  defaultValue: None
  description: Enter a set of properties to include. If you don't specify anything then all properties will be used.
  parameterValueGroup: []
  pipelineInput: False
  position: 1
  type: String[]
- name: ViewName
  aliases: []
  defaultValue: default
  description: Enter the name of your view.
  parameterValueGroup: []
  pipelineInput: False
  position: 3
  type: String
- name: WhatIf
  aliases:
  - wi
  defaultValue: None
  description: Shows what would happen if the cmdlet runs. The cmdlet is not run.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: SwitchParameter
- name: Typename
  aliases: []
  defaultValue: None
  description: Specify the object typename. If you don't, then the command will use the detected object type from the Inputobject.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: String
- name: GroupBy
  aliases: []
  defaultValue: None
  description: Specify a property name to group on. You can edit the file if you need to change how it is displayed and/or calculated.
  parameterValueGroup: []
  pipelineInput: False
  position: Named
  type: String
outputs:
- type: None
  description: ''
- type: System.IO.FileInfo
  description: ''
requiredParameters:
- name: InputObject
  aliases: []
  defaultValue: None
  description: Specify an object to analyze and generate or update a ps1xml file. All you need is one instance of the object.
  parameterValueGroup: []
  pipelineInput: True (ByValue)
  position: 0
  type: Object
- name: Path
  aliases: []
  defaultValue: None
  description: Enter full filename and path for the format.ps1xml file.
  parameterValueGroup: []
  pipelineInput: False
  position: 4
  type: String
remarks: >-
  When defining custom objects with a new typename, PowerShell by default will display all properties. However, you may wish to have a specific default view, be it a table or list. Or you may want to have different views display the object differently. Format directives are stored in format.ps1xml files which can be tedious to create. This command simplifies that process.

  Pipe an instance of your custom object to this function and it will generate a format.ps1xml file based on either all the properties or a subset that you provide. You can repeat the process to add additional views. When finished, edit the format.ps1xml file and fine tune it. The file will have notes on how to substitute script blocks. If you run this command inside VS Code and use -Passthru, the new file will automatically be opened in your editor.

  Note that table views are set to Autosize. But the table definition will include best guesses for column widths. If you prefer a more granular approach you can delete the Autosize tag and experiment with varying widths. Don't forget to run Update-FormatData to load your new file. You may need to start a new PowerShell session to test changes.
summary: Create or modify a format.ps1xml file
syntaxes:
- parameters:
  - InputObject
  - Properties
  - FormatType
  - ViewName
  - Path
  - Append
  - Confirm
  - Passthru
  - WhatIf
  - Typename
  - GroupBy
